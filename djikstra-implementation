// Djikstra is used for finding the shortest distance in a weighted graph
//can be used for both directed and undirected graph

int main(){
 int m, n;
 cin>>m>>n;
 vector<pair<int, int>>g[n+1];
 int source;
 cin>>source;
 int a, b, w;
 for(int i=0; i<m; i++){
      cin>>a>>b>>w;
      g[u].push_back(make_pair(b, wt));
      g[v].push_back(make_pair(a,wt));
  }
  //min_heap
  priority_queue(pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>)pq;
  vector<int>dist(n+1, INT_MAX);
  dist[source]=0;
  pq.push_back(make_pair(0,0));
  //Djikstra starts here
  while(!pq.empty()){
      int dist = pq.top().first;
      int prev = pq.top().second;
      pq.pop();
      vector<pair<int,int>>:: iterator it;
      for(it = g[prev].begin(); it!= g[prev].end(); it++){
          int next = it->first;
          int nextDist = it->second;
          if(dist[next]>nextDist+dist[prev]){
               dist[next] = nextDist+dist[prev];
             pq.push_back(make_pair(dist[next], next));
             }
             }
             }
            
