//Q. find all paths from source (0) to target (n-1)
//Given graph is DAG
//It's a simple recursion backtracking question, where we need to keep on pushing the nodes in every dfs call
//and once we reach the end we need to pop back.

class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>>ans;
        vector<int>path;
        dfs(0, graph, path, ans);
        return ans;
    }
    void dfs(int node, vector<vector<int>>&graph, vector<int>&path, vector<vector<int>>&ans){
        path.push_back(node);
        if(node == graph.size()-1){
            ans.push_back(path);
        }else{
            for(auto it : graph[node]){
                dfs(it, graph, path, ans);
            }
        }
        path.pop_back();
    }
};
